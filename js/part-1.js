// Initializes HTML Elements
const greetingExampleElements = document.getElementById('greeting-example');
const generatePrimesExampleElements = document.getElementById('generate-primes-example');
const httpRequestExampleElements = document.getElementById('http-request-example');
const callBackExampleElements = document.getElementById('callback-example');
const timeOutExampleElements= document.getElementById('timeout-example');

// Greeting Example
function greetingExample(name) {
    // Selects the h4 element from the greeting example div and sets its innerHTML
    greetingExampleElements.querySelector('h4').innerHTML = `
        Hello ${name}, nice to meet you!`;
    // Logs the name to the console.
    console.log(`Hello, my name is ${name}!`);
}

// Generate primes example
function generatePrimesExample(num) {
    // Stores the current time once the function is called
    let time = Date.now()

    // Sets the maximum number to the number value passed in.
    const maximum = num;

    // Function that tests if the passed in number is primed.
    function isPrime(n) {
        // Initializes a for loop, this loop will run until the passed in number's square root value is achieved.
        for (let i = 2; i <= Math.sqrt(n); i++) {
            // Checks if the number passed in is divisible by the value of i,
            // if the condition is true, returns false.
            if (n % i === 0) {
                return false
            }
        }

        // Returns true if the value of n is greater than 1 and above for loop never achieved its if statement.
        return n > 1;
    }

    // Function that generates a random number within the maximum number limit.
    const random = (max) => Math.floor(Math.random() * max);

    // Initializes an array to store the generate primes.
    const primes = [];
    
    // Initializes a while loop that will run until the length of the primes array becomes equal or greater than the passed in number value.
    while (primes.length < num) {
        // Initializes a variable that will store a random number generated by the random function above.
        const candidate = random(maximum);
        
        // Passes the candidate variable to the isPrime function and if true is returned, the candidate variable is pushed to the prime array.
        if (isPrime(candidate)) {
            primes.push(candidate);
        }
    }

    // Sets the h5 element in the generate Primes example div to the amount of time in milliseconds that has elapsed since the function first ran.
    generatePrimesExampleElements.querySelector('h5').innerHTML = `${Date.now() - time} milliseconds elapsed`;

    // Returns the primes array.
    return primes;
}

// HTTP Request example
function httpRequestExample() {
    // Stores the current time once the function is called
    let time = Date.now();

    // Initializes a variable to store a new http request
    const xhr = new XMLHttpRequest(); 

    // Initializes an event listener to trigger once the http request completes
    xhr.addEventListener('loadend', () => {
        // Sets the h5 element innerHTML to display the finished status and the amount of time that elapsed before it was finished. 
        httpRequestExampleElements.querySelector('h5').innerHTML = `Finished with status: ${xhr.status}, eventListener finished in ${Date.now() - time} milliseconds`;
    })

    // Triggers the GET method to retrieve the provided http page.
    xhr.open('GET',
        "https://raw.githubusercontent.com/mdn/content/main/files/en-us/_wikihistory.json",
    )

    // Triggers the send method for the http request variable.
    xhr.send()

    // Sets the span element innerHTML to display the finished status
    httpRequestExampleElements.querySelector('span').innerHTML = `Finished`;

    // Sets the h6 element innerHTML to display the amount of time that elapsed before function has finished running. 
    httpRequestExampleElements.querySelector('h6').innerHTML = `Whole function finished in ${Date.now() - time} milliseconds`;
}

// Call Back Example
function callBackExample(type) {
    // Checks the value of the passed in variable, 0 triggers the function example and 1 triggers the callback method.
    if (type === 0) {
        // Stores the current time once the function is called
        let time = Date.now();

        // Returns the passed in value plus 1.
        function doStep1(val) {
            return val + 1;
        }

        // Returns the passed in value plus 2.
        function doStep2(val) {
            return val + 2;
        }

        // Returns the passed in value plus 3.
        function doStep3(val) {
            return val + 3;
        }

        // Initializes a variable with a value of 0.
        let result = 0;

        // Calls the first function and passes in the result variable.
        result = doStep1(result);

        // Calls the second function and passes in the result variable
        result = doStep2(result);

        // Calls the third function and passes in the result variable
        result = doStep3(result);

        // Sets the span element innerHTML to display the result value
        callBackExampleElements.querySelectorAll('span')[0].innerHTML = result;

        // Sets the h6 element innerHTML to display the amount of time elapsed in milliseconds for the function to complete.
        callBackExampleElements.querySelectorAll('h6')[0].innerHTML = `${Date.now() - time} milliseconds elapsed`;
    } else if (type === 1) {
        // Stores the current time once the function is called
        let time = Date.now();

        // Returns the passed in value plus 1 and then triggers the passed in callback function with result variable passed in with it.
        function doStep1(val, callback) {
            const result = val + 1;
            callback(result);
        }

        // Returns the passed in value plus 2 and then triggers the passed in callback function with result variable passed in with it.
        function doStep2(val, callback) {
            const result = val + 2;
            callback(result);
        }

        // Returns the passed in value plus 3 and then triggers the passed in callback function with result variable passed in with it.
        function doStep3(val, callback) {
            const result = val + 3;
            callback(result);
        }

        // Calls the first function and passes in 0 and the next callback,
        doStep1(0, (result1) => {
            // Logs nest 1 to the console.
            console.log('nest 1')
            // Calls the second function and takes the value from the first callback and passes in that result along with the next callback.
            doStep2(result1, (result2) => {
                // Logs nest 2 to the console.
                console.log('nest 2')
                // Calls the third function and takes the value from the first callback and passes in that result along with the next callback.
                doStep3(result2, (result3) => {
                    // Logs nest 3 to the console.
                    console.log('nest 3')

                    // Sets the span element innerHTML to display the result value
                    callBackExampleElements.querySelectorAll('span')[1].innerHTML = result3;
                })
            })
        })

        // Sets the h6 element innerHTML to display the amount of time elapsed in milliseconds for the function to complete.
        callBackExampleElements.querySelectorAll('h6')[1].innerHTML = `${Date.now() - time} milliseconds elapsed`;
    }

    // Right away, I noticed that using either method works and shows to have no difference in run time, showing that the callback hell they referenced on the page should be avoided since 
    // the callback method is harder to create and troubleshoot.
}

// Timeout example.
function timeOutExample() {
    // Stores the current time once the function is called
    let time = Date.now();

    // Initializes a timeout to trigger after 2 seconds.
    setTimeout(() => {
        // After the time elapsed, set the span element's inner html to display that the timeout has finished and how long it took to trigger after the function was first called.
        timeOutExampleElements.querySelector('span').innerHTML = `Finished, timeout finished after ${Date.now() - time} milliseconds.`
    }, 2000)

    // Sets the span element's inner html to display that the timeout has been triggered.
    timeOutExampleElements.querySelector('span').innerHTML = `Triggered`

    // Sets the h6 elements's inner html to display how long it took the function to finish.
    timeOutExampleElements.querySelector('h6').innerHTML = `Function finished after ${Date.now() - time} milliseconds.`
}

// Loads all of the eventListeners for the web page
function loadEventListeners() {
    // Initializes the eventListeners for the greeting example 
    greetingExampleElements.querySelector('input').addEventListener('change', (e) => {
        greetingExample(e.target.value);
    })
    
    // Initializes a node list of the button elements in the generate prime example
    let generatePrimesButtons = generatePrimesExampleElements.querySelectorAll('button');
    // Initializes the eventListeners for the generate prime example
    generatePrimesButtons[0].addEventListener('click', () => {
        let result = generatePrimesExample(generatePrimesExampleElements.querySelector('input').value)
        generatePrimesExampleElements.querySelector('span').innerHTML = 'Finished';
    })
    generatePrimesButtons[1].addEventListener('click', () => {
        generatePrimesExampleElements.querySelector('span').innerHTML = 'Not Started'
        generatePrimesExampleElements.querySelector('h5').innerHTML = ''
        generatePrimesExampleElements.querySelector('textarea').value = ''
    })
    generatePrimesExampleElements.querySelector('input').addEventListener('change', () => {
        generatePrimesExampleElements.querySelector('span').innerHTML = 'Not Started'
        generatePrimesExampleElements.querySelector('h5').innerHTML = ''
        generatePrimesExampleElements.querySelector('textarea').value = ''
    })

    // Initializes a node list of the button elements in the http request example
    let httpRequestButtons = httpRequestExampleElements.querySelectorAll('button');
    // Initializes the eventListeners for the http request example
    httpRequestButtons[0].addEventListener('click', () => {
        httpRequestExample();
    })
    httpRequestButtons[1].addEventListener('click', () => {
        httpRequestExampleElements.querySelector('span').innerHTML = `Not Started`;
        httpRequestExampleElements.querySelector('h5').innerHTML = ``;
        httpRequestExampleElements.querySelector('h6').innerHTML = ``;
    })

    // Initializes a node list of the button elements in the callback example
    let callBackButtons = callBackExampleElements.querySelectorAll('button')
    // Initializes the eventListeners for the callback example
    callBackButtons[2].addEventListener('click', () => {
        callBackExampleElements.querySelectorAll('span').forEach((e) => e.innerHTML = ``);
        callBackExampleElements.querySelectorAll('h6').forEach((e) => e.innerHTML = ``);
    })
    callBackButtons[0].addEventListener('click', () => {
        callBackExample(0);
    })
    callBackButtons[1].addEventListener('click', () => {
        callBackExample(1);
    })

    // Initializes a node list of the button elements in the timeout example
    let timeoutButtons = timeOutExampleElements.querySelectorAll('button');
    // Initializes the eventListeners for the timeout example
    timeoutButtons[0].addEventListener('click', () => {
        timeOutExample();
    })
    timeoutButtons[1].addEventListener('click', () => {
        timeOutExampleElements.querySelector('span').innerHTML = 'Not Started';
        timeOutExampleElements.querySelector('h6').innerHTML = '';
        timeOutExampleElements.querySelector('textarea').value = '';
    })
}

// Calls the function to load all of the event listeners for the webpage.
loadEventListeners()